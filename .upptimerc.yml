# Change these first
owner: preschian # Your GitHub organization or username, where this repository lives
repo: kodadot-status # The name of this repository

status-website:
  # Add your custom domain name, or remove the `cname` line if you don't have a domain
  # Uncomment the `baseUrl` line if you don't have a custom domain and add your repo name there
  # cname: demo.upptime.js.org
  baseUrl: /kodadot-status
  logoUrl: https://kodadot.xyz/_nuxt/img/Koda_Beta.17049af.svg
  name: KodaDot NFT Marketplace
  introTitle: '[KodaDot](https://kodadot.xyz/) is developed as open source NFT marketplace and ultimately created as public goods of Internet, currently running on [Kusama.network](https://kusama.network/)'
  # introMessage: This is a sample status page which uses **real-time** data from our [GitHub repository](https://github.com/upptime/upptime). No server required â€” just GitHub Actions, Issues, and Pages. [**Get your own for free**](https://github.com/upptime/upptime)
  navbar:
    - title: Marketplace
      href: https://kodadot.xyz/
    - title: GitHub
      href: https://github.com/kodadot/nft-gallery
# Upptime also supports notifications, assigning issues, and more
# See https://upptime.js.org/docs/configuration

sites:
  # cloudflare workers
  - name: durable-jpeg
    url: https://durable-jpeg.kodadot.workers.dev/batch
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"keys":["bafkreiebujmt5lzj7wv64hlso5dt3d5p237l3hwshxb4rqmt7gn3we43fe"]}'
  - name: direct-upload
    url: https://direct-upload.kodadot.workers.dev/
    expectedStatusCodes:
      - 404
  - name: estuary
    url: https://pinning.kodadot.workers.dev/
    expectedStatusCodes:
      - 404
  - name: nft-storage
    url: https://nft-storage.kodadot.workers.dev/
    expectedStatusCodes:
      - 404

  # subsquid
  - name: rubick v6
    url: https://app.gc.subsquid.io/beta/rubick/006/graphql
  - name: rubick
    url: https://squid.subsquid.io/rubick/v/007/graphql
  - name: snekk
    url: https://squid.subsquid.io/snekk/v/003/graphql
  - name: snekkv2
    url: https://squid.subsquid.io/snekk/v/004/graphql
  - name: click
    url: https://squid.subsquid.io/click/v/001/graphql

  # rubick with queries
  - name: rubick - series-insight
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{\"operationName\":\"seriesInsightList\",\"variables\":{\"limit\":50,\"offset\":0,\"orderBy\":\"volume_DESC\",\"where\":{\"floorPrice_isNull\":false}},\"query\":\"query seriesInsightList($limit: Int, $orderBy: SeriesOrderByInput!, $where: SeriesWhereInput) {\\n  collectionEntities: series(limit: $limit, orderBy: [$orderBy], where: $where) {\\n    id\\n    floorPrice\\n    highestSale\\n    averagePrice\\n    image\\n    metadata\\n    sold\\n    name\\n    total\\n    buys\\n    unique\\n    uniqueCollectors\\n    volume\\n    emoteCount\\n    __typename\\n  }\\n}\\n\"}'
  - name: rubick - spotlight
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{\"operationName\":\"spotlightLitst\",\"variables\":{\"offset\":0,\"orderBy\":\"sold_DESC\"},\"query\":\"query spotlightLitst($limit: Int, $offset: Int, $orderBy: SpotlightOrderByInput!, $where: SpotlightWhereInput) {\\n  collectionEntities: spotlights(\\n    limit: $limit\\n    offset: $offset\\n    orderBy: [$orderBy]\\n    where: $where\\n  ) {\\n    id\\n    unique\\n    sold\\n    total\\n    averagePrice: average\\n    count: collections\\n    uniqueCollectors\\n    volume\\n    __typename\\n  }\\n}\\n\"}'
  - name: rubick - sales
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{\"operationName\":\"SalesFeed\",\"variables\":{},\"query\":\"query SalesFeed {\\n  salesFeed {\\n    id\\n    buyer\\n    collectionId\\n    collectionName\\n    image\\n    issuer\\n    name\\n    salePrice\\n    timestamp\\n    blockNumber\\n    __typename\\n  }\\n}\\n\"}'
  - name: rubick - hot
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{\"operationName\":\"hotNfts\",\"variables\":{\"orderBy\":\"timestamp_DESC\",\"gte\":\"2022-09-17T06:15:12.694Z\"},\"query\":\"query hotNfts($orderBy: [EventOrderByInput!] = timestamp_DESC, $gte: DateTime!) {\\n  result: events(\\n    where: {interaction_eq: BUY, timestamp_gte: $gte}\\n    orderBy: $orderBy\\n  ) {\\n    timestamp\\n    interaction\\n    nft {\\n      collection {\\n        name\\n        id\\n        __typename\\n      }\\n      __typename\\n    }\\n    meta\\n    __typename\\n  }\\n}\\n\"}'

  # netlify
  - name: Netlify functions
    url: https://beta.kodadot.xyz/.netlify/functions/

  # vercel
  - name: Seo Card
    url: https://og-image-green-seven.vercel.app/
    expectedStatusCodes:
      - 200
  - name: Seo Card with Content
    url: https://og-image-green-seven.vercel.app/Kusama%20Bot%20120.jpeg?price=&image=https://kodadot.mypinata.cloud/ipfs/bafkreiefbdznbjx7ixsdvezdtupj7xpdmgigm7uygl26mk2bozwolemodi&mime=image/jpeg
    expectedStatusCodes:
      - 200

  # providers
  - name: pinata
    url: https://kodadot.mypinata.cloud/ipfs/bafkreigrljewlnnusfefnmm75rrmb46ecn2cv27dfkewzqrom6zcqetefq
  - name: coingecko
    url: https://api.coingecko.com/api/v3/ping
  - name: ramp
    url: https://ramp.network/buy/
  - name: clouflare ipfs
    url: https://cloudflare-ipfs.com/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/

  # pages
  - name: KodaDot - home
    url: https://kodadot.xyz/
