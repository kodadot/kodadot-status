# Change these first
owner: kodadot # Your GitHub organization or username, where this repository lives
repo: uptime # The name of this repository

status-website:
  # Add your custom domain name, or remove the `cname` line if you don't have a domain
  # Uncomment the `baseUrl` line if you don't have a custom domain and add your repo name there
  # cname: demo.upptime.js.org
  baseUrl: /uptime
  logoUrl: https://kodadot.xyz/_nuxt/img/Koda_Beta.17049af.svg
  name: KodaDot NFT Marketplace
  introTitle: '[KodaDot](https://kodadot.xyz/) is developed as open source NFT marketplace and ultimately created as public goods of Internet, currently running on [Kusama.network](https://kusama.network/)'
  # introMessage: This is a sample status page which uses **real-time** data from our [GitHub repository](https://github.com/upptime/upptime). No server required ‚Äî just GitHub Actions, Issues, and Pages. [**Get your own for free**](https://github.com/upptime/upptime)
  navbar:
    - title: Marketplace
      href: https://kodadot.xyz/
    - title: GitHub
      href: https://github.com/kodadot/nft-gallery
# Upptime also supports notifications, assigning issues, and more
# See https://upptime.js.org/docs/configuration

sites:
  # cloudflare workers
  - name: durable-jpeg
    url: https://durable-jpeg.kodadot.workers.dev/batch
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"keys":["bafkreiebujmt5lzj7wv64hlso5dt3d5p237l3hwshxb4rqmt7gn3we43fe"]}'
  - name: direct-upload
    url: https://direct-upload.kodadot.workers.dev/
    expectedStatusCodes:
      - 404
  - name: estuary
    url: https://pinning.kodadot.workers.dev/
    expectedStatusCodes:
      - 404
  - name: nft-storage
    url: https://nft-storage.kodadot.workers.dev/
    expectedStatusCodes:
      - 404

  # subsquid
  - name: antick
    url: https://squid.subsquid.io/antick/v/001-rc0/graphql
  - name: snekk
    url: https://squid.subsquid.io/snekk/v/004/graphql
  - name: bsx
    url: https://squid.subsquid.io/snekk/v/005/graphql
  - name: rubick
    url: https://squid.subsquid.io/rubick/v/007/graphql
  - name: click
    url: https://squid.subsquid.io/click/v/001/graphql

  # rubick with queries
  - name: rubick - curated list
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"query":"query collectionCuratedList($list: [String!]) {\n  collectionEntities(where: {id_in: $list}) {\n    id\n    issuer\n    name\n    meta {\n      id\n      name\n      image\n      __typename\n    }\n    __typename\n  }\n}\n","variables":{"list":["800f8a914281765a7d-KITTY","2075be44ea4b9e422d-üê∫","160a6f4320f11acb25-LCKWV","0a24c7876a892acb79-RADTOADZ","7cf9daa38281a57331-BSS","900D19DC7D3C444E4C-KSMBOT"]}}'
  - name: rubick - newest list
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"query":"query lastNftListByEvent($limit: Float!, $event: String!) {\n  events: lastEvent(limit: $limit, offset: 0, interaction: $event) {\n    meta: value\n    timestamp\n    nftId: id\n    name\n    issuer\n    currentOwner\n    metadata\n    animationUrl\n    image\n    collection: name\n    __typename\n  }\n}\n","variables":{"limit":10,"event":"LIST"}}'
  - name: rubick - latest sales
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"query":"query lastNftListByEvent($limit: Float!, $event: String!) {\n  events: lastEvent(limit: $limit, offset: 0, interaction: $event) {\n    meta: value\n    timestamp\n    nftId: id\n    name\n    issuer\n    currentOwner\n    metadata\n    animationUrl\n    image\n    collection: name\n    __typename\n  }\n}\n","variables":{"limit":10,"event":"BUY"}}'
  - name: rubick - spotlight
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"query":"query spotlightLitst($limit: Int, $offset: Int, $orderBy: SpotlightOrderByInput!, $where: SpotlightWhereInput) {\n  collectionEntities: spotlights(\n    limit: $limit\n    offset: $offset\n    orderBy: [$orderBy]\n    where: $where\n  ) {\n    id\n    unique\n    sold\n    total\n    averagePrice: average\n    count: collections\n    uniqueCollectors\n    volume\n    __typename\n  }\n}\n","variables":{"offset":0,"orderBy":"sold_DESC"}}'
  - name: rubick - series-insight
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"query":"query seriesInsightList($limit: Int, $orderBy: SeriesOrderByInput!, $where: SeriesWhereInput) {\n  collectionEntities: series(limit: $limit, orderBy: [$orderBy], where: $where) {\n    id\n    floorPrice\n    highestSale\n    averagePrice\n    image\n    metadata\n    sold\n    name\n    total\n    buys\n    unique\n    uniqueCollectors\n    volume\n    emoteCount\n    __typename\n  }\n}\n","variables":{"limit":50,"offset":0,"orderBy":"volume_DESC","where":{"floorPrice_isNull":false}}}'
  - name: rubick - sales
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"operationName":"SalesFeed","variables":{},"query":"query SalesFeed {\n  salesFeed {\n    id\n    buyer\n    collectionId\n    collectionName\n    image\n    issuer\n    name\n    salePrice\n    timestamp\n    blockNumber\n    __typename\n  }\n}\n"}'
  - name: rubick - hot
    url: https://squid.subsquid.io/rubick/v/007/graphql
    method: POST
    headers:
      - 'Content-Type: application/json'
    body: '{"query":"query hotNfts($orderBy: [EventOrderByInput!] = timestamp_DESC, $gte: DateTime!) {\n  result: events(\n    where: {interaction_eq: BUY, timestamp_gte: $gte}\n    orderBy: $orderBy\n  ) {\n    timestamp\n    interaction\n    nft {\n      collection {\n        name\n        id\n        __typename\n      }\n      __typename\n    }\n    meta\n    __typename\n  }\n}\n","variables":{"orderBy":"timestamp_DESC","gte":"2022-09-17T06:38:30.078Z"}}'

  # netlify
  - name: Netlify functions
    url: https://beta.kodadot.xyz/.netlify/functions/

  # vercel
  - name: Seo Card
    url: https://og-image-green-seven.vercel.app/
    expectedStatusCodes:
      - 200
  - name: Seo Card with Content
    url: https://og-image-green-seven.vercel.app/Kusama%20Bot%20120.jpeg?price=&image=https://kodadot.mypinata.cloud/ipfs/bafkreiefbdznbjx7ixsdvezdtupj7xpdmgigm7uygl26mk2bozwolemodi&mime=image/jpeg
    expectedStatusCodes:
      - 200

  # providers
  - name: pinata
    url: https://kodadot.mypinata.cloud/ipfs/bafybeidkhq7aynm2yuuvzimkqcabbqgg3w2uzvy2e7zq3vl5ojhf36kxea
  - name: nftstorage.link
    url: https://bafybeidkhq7aynm2yuuvzimkqcabbqgg3w2uzvy2e7zq3vl5ojhf36kxea.ipfs.nftstorage.link/
  - name: clouflare ipfs
    url: https://cloudflare-ipfs.com/ipfs/bafybeidkhq7aynm2yuuvzimkqcabbqgg3w2uzvy2e7zq3vl5ojhf36kxea
  - name: coingecko
    url: https://api.coingecko.com/api/v3/ping
  - name: ramp
    url: https://ramp.network/buy/

  # pages
  - name: KodaDot - home
    url: https://kodadot.xyz/
